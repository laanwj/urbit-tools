#!/usr/bin/python3
import urbit.util as urbit_util
from urbit.util import to_le, strings
from urbit.cue import cue
import binascii
import sys

if sys.version_info[0:2] < (3,0):
    print("Requires python3", file=sys.stderr)
    exit(1)

packets_hex = [
    b'01dfec4dae1cf00002b40900f81458db600500020a0d0002b40002fe58981c3cce900108a8bfa58fedcf9577f6c7e36666958f9306000400a51500f4dfb85839cfb31e23eaa2ea0bf7dc82ece195a6d8f1730f5565009d55a715cbb1a2f1858b07470ae9b4cd61023a554a6c8cbb109f9606e6ff036aca98121fb4ab84d08ae2e26f380ae829d3d4050cd6669b3aad8774a48d1ab39cbc2c6e90ecaa821ced8c419cdbb40fc477776d4bee5cfe9963444dd5844abd4a59d2c594e43d24802ccf72212d4d597ec5b975ce120ee7d53b62e509da99e4bda4fd8895704c7e0146e22b387de3acf1aee9392c8f5a7ea6331d13f1e6c39462c0429411d70591016e6a2de2669891602296b1701b517a8caf2e5b01233970fc95659a28d3f1d093bbd2b5a23f3fe47d93215ba4629059a35efc494fd1c65e90730b6c6c1defac6c32e00204141a40000000000000c042b35604c54803000060812f73077cb2bab572c0677b932307aef705de8d1de81ada00cf1d5a1a5d39c07fc5164696d696262fe1ca04f8d985b9819095c981308585b901c003841dc5e6f6d7f37c425d2bbe812648e809cec30fe8409a292c9dcf78807b82aaebe2d747b3ed8c16ad8a8efcecbdea536546c4fc3bd44ea146165b62b5646387dc9520b57c8f5dd58878b5a993d88ef1064eeb1849d80459cb90898106eccbea01db492c9f2999a442aabe46f8abeafc769e7dc9d15374b1fc93cce109e9ec5179a5617fc7cc7270843f03d15636819253fc2d45cf9c2cb156d340d69d804fa139fba7431443b2caac8fb8e6861204207527f8cefffb8029709121e64c436ce16cefd81a0ef88ac90653d9484171655e865c32b46bd6c8dd8cd987a5f34bb92bd96327ed3f472c1046e1b2d36db0ea542e1400a4ca3fe6c662971e8c1f07ff1f20b900a0ffb2873d400653b77d31fa37f937d096f86753faed634b75cf8d45707db187fec27e2ed0363ecfece6e9e60740cb7c1fa67093d97262a76c354f185b58fb956f56cc9078f89888cd29652b810a896f11e0c986efaf4db322b2e28debab059c67b4cd3731b5c9970397d121dba09fcd102a8d1624e2c5250d4b6919c4b26927db793f37d56ad973abad8e9259a07971ec76b437bfc57540943ad977043a26080286cbe3e7127d1fe1ef1b9c36dd6e5531c220ad809bd9b80a304338b76d9a6e5fe2d97c51caf237f98732fc7d1f463d426103ae683b57b0e453ca23f6596e5799ea2169754a97958c187c8825af8a64473406f2dd7561269d0e4ebede2b1f0ae4716593810108200000000000000007062ce461a4010000b08694c780bf96e67606f856c98985b9814895c1d589b1a58d014003849dc8637b65d05f164f6b9bec888da8f76ae991c9ce0e5be9bbb97f5a0458a26594a3aaf9759c6b7fbb25ac82e8454b3481c218f6f7f0d93ccf352f9715223e967bfccc0e8e25e484257445fcf67d2d7b12b3ed72e56372e63dd1d5bce07da2f5a5d3539534486cde5c7afc0f45c9',
    b'01dfec4dae1cf00002b409000c792ab96f018080420380002d80803f1626078fe3900108a8bfa58fedcf9577f6c7e36666958f9306004ab77062b2072c8950258e3d03da9730f30d9bbb9fa9926c3473beec14d8533683b8afc55a94921a30d2e54a6b8a7ef5227e62e3856131d7c3a39a2e4d75777875c736a8998c45fc61be01258787ad450b1d3288b5c588efa6b81e44efaccf52723b08c357a0d758055489e5f0c66bfa5871bb4e358a9243d59926a3fc8eba73011a007ce44299aa89d57b3e5099bed39fc1072c1700f45ff229981941d9b7f3cbc3597d97632dd4f6d1bca35e24918de57036be0fd1a906f1064edfc6b8e66b42f2491842fe819bbf86cbb23f52c6699e078057b72aafbf5c88e3d16236d12d91079d05400521c9e9ab27a93099d0086ebc4214cb41c19ccd878505a967b543bbdf1fdff6eec5d484d74aff5da8aa74449af5cb4f16e2181c6940047bf08a256b118a1c8af723406e75c78a4aeab55b2335ddb01f2201ab3124ac598a9fc8b73e3500d78d5e0b1941cf2066a90c6e049a2d5c9d8395a415d0877f7f98be37852398ae2abe8afd99774d83974cd7ab199ded53de2e04d870d645606401c10a7f86310e605dd32f0ac84861e0a13760b0d212baf6fc06f5aecc041000000000000080104d07f230d20000005843ca63c01fd30b930b001e20ec2ee5798a18eb68525dd3ef1f292d7e810675c09a4d4c66b4aa42d339ffe3b7f004fc1ece6e6f67b20ccc2fa3e25f36b9ee4ddafa054f61914a6cf9b2c97a36a1fd91a2c23e2f66bd69c833a9be9a33c8663177e4304735da4bbea6589ef02d93d3a3cbb4ce94048b2d26f3aefbfbea0b8d3204aed4c127c1f04af1134ce862749eee6c97a735ae1aed8749e3b32470a507981ca78231ee4146206738ed6940ea7169dc7caaa3dad018e88607f9292413688fe3c98e45e1b954dbef115fcf4b8369c93f68c6d1dacd2bc4bf1efd14de00b648a95e67b31386c6e68d1c282b78dcbb778b22186151ad3d088c084ea435a0e69512d40ec295754b9af479d9e6eaca02c0ff51d42a2c07e4330a372d7134a5990a13ab9076d61fa4c183f1e1cb68af228ce5401feb928a2a1a086124a5a48d9d392c2f698d7b3e6c3dba7621995e316229d8894ce2eab6b3a8bf3149ee24ad1f678b48e8826ee4a85f1e9cb196cc7bb07abd4f192dbd89bfc5b9db67fbce289f6d87f1bfbe839a2ac53d630207eec888a0ff20fc4042fb27db323f7e6cbed5981f170044f18088ad47f4fd34fea5d0e6d06db1be12ec61b677c46c1e3889aca6fd1a41fc5d4a9d4ad1073c29b8790261f65d2cb7920a80796889f8beb4d7040013786dfdec0017c2d71ff14b0e29b30012ce93e44ddbdc39d35c60cb5e40ae6dd67eb9b9746e7a2e9d0fdc54daf556e78a98'
]
# see ++meal in zuze.hoon
d = []
for packet in packets_hex:
    packet = binascii.a2b_hex(packet)
    num = urbit_util.from_le(packet)
    cake = cue(num)
    assert(urbit_util.num_to_term(cake[0]) == '%fore')
    inner = cake[1][1][1]
    print(urbit_util.format_hexnum(inner & ((1<<96)-1)))
    inner >>= 96 # drop routing info
    inner_cake = cue(inner)
    assert(urbit_util.num_to_term(inner_cake[0]) == '%carp')
    #print(inner_cake)
    inner2_skin = inner_cake[1][0]
    inner2_idx = inner_cake[1][1][0]
    inner2_cnt = inner_cake[1][1][1][0]
    inner2_hdr = inner_cake[1][1][1][1][0]
    inner2 = inner_cake[1][1][1][1][1]
    d.append(inner2)
    #print(binascii.b2a_hex(to_le(inner2_hdr)))
    #print(binascii.b2a_hex(to_le(inner2)))
    print(inner2_skin)

d = (d[1]<<8192) | d[0]

hypercake = cue(d)
print(hypercake)
print(strings(hypercake))

